headers {
  Accept-Encoding: gzip, deflate, br, zstd
  Accept: */*
  Content-Type: application/json
  User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 Edg/124.0.0.0
}

auth {
  mode: bearer
}

auth:bearer {
  token: {{access_token}}
}

script:pre-request {
  const storedWeekdaysStrings = bru.getEnvVar("weekdays_strings_arr");
  const weekdayStrings = JSON.parse(storedWeekdaysStrings.replace(/'/g, '"'));
  const genders = ["MALE", "FEMALE", "OTHER"];
  const categoryIds = ["01611b30-2a6b-4efd-a4b8-d6054a50abd0", "0e7993b6-76a4-40d2-ab7f-524db9e4bdd9", "1681dead-9f4a-48f1-841c-5a38608bd0f9",
  "1a7b8534-cbce-41f2-894c-a48fcf701607"];

  // Utility methods
  const utils = {
      weekdayStrings,
      chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
      generateRandomString: (length) => {
          let randomString = '';
          for (let i = 0; i < length; i++) {
              const randomIndex = Math.floor(Math.random() * utils.chars.length);
              randomString += utils.chars[randomIndex];
          }
          return randomString;
      },
      isTimeBetweenFirst30MinOfDay: () => {
          const now = new Date();
  
          // Set start to 00:00 of today
          const start = new Date(now);
          start.setUTCHours(0, 0, 0, 0);
  
          // Set end to 00:30 of today
          const end = new Date(now);
          end.setUTCHours(0, 30, 0, 0);
  
          if (now >= start && now <= end) {
              return true;
          }
          return false;
      },
      getDayString: (dayNumber) => {
          return utils.weekdayStrings[dayNumber];
      },
      getDayStringOfToday: () => {
          const now = new Date();
          return utils.getDayString(now.getUTCDay());
      },
      getRandomIntInRange: (min, max) => {
          return Math.floor(Math.random() * (max - min + 1)) + min;
      },
      getNRandomItems: (arr, n) => {
          let len = arr.length;
          const result = new Array(n),
              taken = new Array(len);
          if (n > len)
              throw new RangeError("getNRandomItems: more elements taken than available");
          while (n--) {
              const x = Math.floor(Math.random() * len);
              result[n] = arr[x in taken ? taken[x] : x];
              taken[x] = --len in taken ? taken[len] : len;
          }
          return result;
      },
      getNRandomWeekdays: (n) => {
          return utils.getNRandomItems(utils.weekdayStrings, n);
      },
      getRandomCategoryIds: () => {
        return utils.getNRandomItems(categoryIds, 2)
      },
      getRandomGender: () => {
        return utils.getNRandomItems(genders, 1)[0];
      }
  };
}
