meta {
  name: default paging-default sorting-query
  type: graphql
  seq: 2
}

post {
  url: {{base_url}}/graphql
  body: graphql
  auth: none
}

body:graphql {
  query Query($tutorId: String, $q: String) {
    feedbacks(tutorId: $tutorId, q: $q) {
      results {
        id
        rate
        text
        createdAt
        updatedAt
        user {
          avatar {
            id
            url
            title
            size
          }
          username
          id
        }
        tutorId
      }
      totalCount
    }
  }
}

body:graphql:vars {
  {
    "tutorId": "{{sample_tutor_id}}",
    "q": "Special"
  }
}

assert {
  res.status: eq 200
  res.responseTime: lte {{high_response_time}}
}

tests {
  
  test("should get a correct response", function (){
    const responseData = res.getBody();
     const defaultLimit = parseInt(bru.getEnvVar("default_limit"));
    const feedbacks = responseData.data.feedbacks.results;
   const tutorId = bru.getEnvVar("sample_tutor_id");
    
    // Check paging
    expect(responseData.data.feedbacks.results.length).to.be.most(defaultLimit).and.to.be.most(responseData.data.feedbacks.totalCount);
    // Check query
    expect(feedbacks.every((value) => value.text.search(/Special/i) !== -1)).to.be.equal(true);
  
    // Check sort
    expect(feedbacks.every((value, index, array) => value.tutorId === tutorId && 
      (index === 0 || value.createdAt <= array[index - 1].createdAt))).to.be.equal(true)
  });
}
