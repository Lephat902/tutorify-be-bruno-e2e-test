meta {
  name: Verify student profile updated
  type: graphql
  seq: 4
}

post {
  url: {{graphql_base_url}}
  body: graphql
  auth: inherit
}

body:graphql {
  query Query {
    myProfile {
      ... on Student {
        address
        gender
        avatar {
          id
        }
        interestedClassCategories {
          id
        }
      }
    }
  }
}

assert {
  res.body.data.myProfile.address: eq {{random_address}}
  res.status: eq 200
  res.body.data.myProfile.gender: eq {{random_gender}}
  res.body.data.myProfile.avatar.id: eq "6612e5e6fb334fd9852f87e0"
}

tests {
  test("should get updated interestedClassCategories", function () {
    const responseCatIds = res.body.data.myProfile.interestedClassCategories.map(e => e.id).sort();
  
    const expectedCatIds = bru.getVar("random_class_category_ids").sort();
    
    expect(responseCatIds).to.be.deep.equal(expectedCatIds);
  });
}
