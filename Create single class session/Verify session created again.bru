meta {
  name: Verify session created again
  type: graphql
  seq: 14
}

post {
  url: {{graphql_base_url}}
  body: graphql
  auth: inherit
}

body:graphql {
  query ExampleQuery($classId: String, $limit: Int, $page: Int, $q: String) {
    classSessions(classId: $classId, limit: $limit, page: $page, q: $q) {
      results {
        id
        class {
          classId
        }
      }
      totalCount
    }
  }
  
}

body:graphql:vars {
  {
    "classId": "{{class_id_to_create_session}}",
    "limit": 1,
    "page": 1,
    "q": "{{random_title}}"
  }
}

script:post-response {
  if (res.body.data.classSessions.results?.[0]?.id && res.body.data.classSessions.results.length == 1) {
    bru.setVar('created_class_session_id', res.body.data.classSessions.results[0].id);
  } else {
    // Loop until id is returned
    bru.setNextRequest("Verify session created again");
  }
}

tests {
  const sessions = res.body.data.classSessions.results;
  const onlySession = sessions[0];
  const defaulAddress = bru.getVar('class_default_address');
  
  if (!(
    sessions?.[0]?.id &&
    onlySession.isOnline === defaulAddress.isOnline
  )) {
    return;
  }
  
  test("should return sessions of specified class", () => {
    for (const session of sessions) {
      expect(session.class.classId).to.equal(bru.getEnvVar('class_id_to_create_session'));
    }
  });
  
  test("should create expected number of sessions", () => {
    const lastestSessionsCount = res.body.data.classSessions.totalCount;
    expect(bru.getVar('sessions_total_count') + 1).to.equal(lastestSessionsCount);
  })
}
